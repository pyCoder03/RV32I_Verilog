$date
	Mon Jun  9 04:28:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module LRU_test $end
$var wire 32 ! value_write [31:0] $end
$var wire 2 " tag_write [1:0] $end
$var wire 1 # memwrite $end
$var wire 1 $ cache_miss $end
$var reg 1 % RD_ $end
$var reg 1 & WR_ $end
$var reg 1 ' clk $end
$var reg 2 ( input_tag [1:0] $end
$var reg 32 ) new_value [31:0] $end
$var reg 1 * rst $end
$var reg 1 + select $end
$scope module DUT $end
$var wire 1 % RD_ $end
$var wire 1 & WR_ $end
$var wire 1 ' clk $end
$var wire 2 , input_tag [1:0] $end
$var wire 1 # memwrite $end
$var wire 32 - new_value [31:0] $end
$var wire 1 * rst $end
$var wire 1 + select $end
$var wire 2 . tag_write [1:0] $end
$var wire 2 / tags0 [1:0] $end
$var wire 2 0 tags1 [1:0] $end
$var wire 2 1 tags2 [1:0] $end
$var wire 2 2 tags3 [1:0] $end
$var wire 32 3 value_write [31:0] $end
$var wire 32 4 values0 [31:0] $end
$var wire 32 5 values1 [31:0] $end
$var wire 32 6 values2 [31:0] $end
$var wire 32 7 values3 [31:0] $end
$var wire 4 8 write_en [3:0] $end
$var wire 4 9 right_shift_en_hit [3:0] $end
$var wire 4 : compare [3:0] $end
$var reg 1 $ cache_miss $end
$var reg 4 ; dirty [3:0] $end
$var reg 32 < read_buf [31:0] $end
$var reg 4 = valid [3:0] $end
$var integer 32 > i [31:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$scope task Read $end
$var reg 2 ? input_tag_arg [1:0] $end
$upscope $end
$scope task Write $end
$var reg 2 @ input_tag_arg [1:0] $end
$var reg 32 A new_value_arg [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx A
bx @
bx ?
b100 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b10010000101010011010100100100 -
b1 ,
1+
0*
b10010000101010011010100100100 )
b1 (
0'
1&
1%
1$
0#
b0 "
b0 !
$end
#5000
b100 >
1'
#10000
0'
1*
#15000
b100 >
1'
#20000
0'
#25000
b100 >
1'
#30000
0'
#35000
b100 >
1'
#40000
0'
#45000
b100 >
1'
#50000
0'
#54000
b11000000100010010101111010000001 A
b1 @
#55000
b1 =
b1111 8
b100 >
b11000000100010010101111010000001 )
b11000000100010010101111010000001 -
0&
1'
#60000
0'
#65000
b1 9
0$
b1 :
b1 ;
b11000000100010010101111010000001 4
b1 /
b0 8
b100 >
1&
1'
#70000
0'
#75000
b100 >
1'
#80000
0'
#85000
b100 >
1'
#90000
0'
#95000
b100 >
1'
#100000
0'
b10000100100001001101011000001001 A
b10 @
#105000
b0 9
b1111 8
1$
b0 :
b100 >
b10000100100001001101011000001001 )
b10000100100001001101011000001001 -
b10 (
b10 ,
0&
1'
#110000
0'
#115000
b1 9
0$
b1 :
b11 ;
b11000000100010010101111010000001 5
b1 0
b10000100100001001101011000001001 4
b10 /
b0 8
b100 >
1&
1'
#120000
0'
#125000
b100 >
1'
#130000
0'
#135000
b100 >
1'
#140000
0'
#145000
b100 >
1'
#150000
0'
b10110001111100000101011001100011 A
b11 @
#155000
b0 9
b1111 8
1$
b0 :
b100 >
b10110001111100000101011001100011 )
b10110001111100000101011001100011 -
b11 (
b11 ,
0&
1'
#160000
0'
#165000
b1 9
0$
b1 :
b111 ;
b11000000100010010101111010000001 6
b1 1
b10000100100001001101011000001001 5
b10 0
b10110001111100000101011001100011 4
b11 /
b0 8
b100 >
1&
1'
#170000
0'
#175000
b100 >
1'
#180000
0'
#185000
b100 >
1'
#190000
0'
#195000
b100 >
1'
#200000
0'
b110101110010111101100001101 A
b10 @
#205000
b0 9
b1111 8
1$
b0 :
b100 >
b110101110010111101100001101 )
b110101110010111101100001101 -
b10 (
b10 ,
0&
1'
#210000
0'
#215000
b1 9
0$
b1 :
b1111 ;
b11000000100010010101111010000001 7
b11000000100010010101111010000001 !
b11000000100010010101111010000001 3
b1 2
b1 "
b1 .
b10000100100001001101011000001001 6
b10 1
b10110001111100000101011001100011 5
b11 0
b110101110010111101100001101 4
b10 /
b0 8
b100 >
1&
1'
#220000
0'
#225000
b100 >
1'
#230000
0'
#235000
b100 >
1'
